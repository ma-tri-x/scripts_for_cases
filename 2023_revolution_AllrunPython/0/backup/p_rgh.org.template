/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      p_rgh;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -1 -2 0 0 0 0];

internalField   uniform _LIQUID-PINF;

boundaryField
{

    "front|back|top|bottom|frontandback|frontandback_pos|frontandback_neg"
    {
      type      wedge;
    }
    
    slip_side
    {
      type      zeroGradient;
    }
    
    side
    {
        type            waveTransmissive;
        field           p_rgh;
        phi             phi;
        rho             rho;
//         psi           psim;
        psi             DrhoDp;
        fieldInf        _LIQUID-PINF;
        gamma           1; //1.006580313;
        lInf            0.0034;//1e-3;
        value           uniform _LIQUID-PINF;
        inletOutlet     false;
        correctSupercritical false;
    }
    
    side_tV
    {
        type            waveTransmissive_timeVaryingPatm;
        field           p_rgh;
        phi             phi;
        rho             rho;
//         psi           psim;
        psi             DrhoDp;
        fieldInf        _LIQUID-PINF;
        freq            _ACOUSTICS-FREQUENCY;
        amplitude       _ALLRUN-BCAMPLITUDE;
        phase           _ACOUSTICS-PHASEDEG;
        gamma           1; //1.006580313;
        lInf            1e-5;//1e-3;
        value           uniform _ALLRUN-BCCURRENTVALUE;
        inletOutlet     false;
        correctSupercritical false;
    }
    
    side_tV_better
    {
       type            groovyBC;
       variables "pinf=_LIQUID-PINF;frequency_groovy=_ACOUSTICS-FREQUENCY;phase=_ACOUSTICS-PHASEBCDEG /180.*pi;amplitude=_ALLRUN-BCAMPLITUDE;";
       valueExpression "pinf+amplitude*sin(2.*pi*frequency_groovy * time() + phase)";
       //valueExpression "_LIQUID-PINF";
       value           uniform _ALLRUN-BCCURRENTVALUE;
    }
    
    _side
    {
        type bubbleWaveTransmissive;
        field           p_rgh;
        phi             phi;
        rho             rho;
        alpha           alpha1;
//         psi           psim;
        psi             DrhoDp;
        fieldInf        _LIQUID-PINF;
        gamma           1; //1.006580313;
        lInf            1;//0.0034;//1e-3;
        value           uniform _LIQUID-PINF;
        inletOutlet     false;
        correctSupercritical false;
        theta           1.0;
    }
    
    upside
    {
        type            waveTransmissive;
        field           p_rgh;
        phi             phi;
        rho             rho;
//         psi           psim;
        psi             DrhoDp;
        fieldInf        _LIQUID-PINF;
        gamma           1; //1.006580313;
        lInf            10;//0.0034;//1e-3;
        value           uniform _LIQUID-PINF;
        inletOutlet     false;
        correctSupercritical true;
    }
    
    top_
    {
        type            waveTransmissive;
        field           p_rgh;
        phi             phi;
        rho             rho;
//         psi           psim;
        psi             DrhoDp;
        fieldInf        _LIQUID-PINF;
        gamma           1; //1.006580313;
        lInf            10;//0.0034;//1e-3;
        value           uniform _LIQUID-PINF;
        inletOutlet     false;
        correctSupercritical true;
    }
    
    downside
    {
        type            waveTransmissive;
        field           p_rgh;
        phi             phi;
        rho             rho;
//         psi           psim;
        psi             DrhoDp;
        fieldInf        _LIQUID-PINF;
        gamma           1; //1.006580313;
        lInf            10;//0.0034;//1e-3;
        value           uniform _LIQUID-PINF;
        inletOutlet     false;
        correctSupercritical true;
    }
   /*outflow
   {
       type            waveTransmissive;
       value           uniform 80000;    //important for correct I/O
       field           p;                //the name of the field that we are working on
       gamma           1.4;              //the ratio of specific heats
       phi             phiv;             //the name of the volumetric flux field ( or if you use the mass flux phi, it will be divided by rho)
       rho             rho;              //the name of the density field
       psi             psi;              //the name of the field that is the deriv. of density with respect to pressure
       lInf            0.05;             //a measure of how far away the far-field condition should be
       fieldInf        80000;            //the far-field value to be applied to p
   }
   The boundary condition performs some basic thermodynamic calculations and tries 
   to do the following: create a tendency towards the fieldInf value while setting 
   the instantaneous value to be someting as consistant as possible with the outgoing 
   characteristics. The larger the value of lInf, the further the boundary condition 
   will deviate from the value specified as fieldInf. However, the smaller the value 
   of lInf, the more reflective the boundary tends to be.*/

     axis
     {
         type      empty;
     }

     ".*_region0"
     {
         type       zeroGradient;
     }
     
     wall
     {
         type       zeroGradient;
     }
     
     soundsoft
     {
         type       fixedValue;
         value      _LIQUID-PINF;
     }
     
     wall2
     {
         type       empty;
     }
     
     bottom_
     {
         type       zeroGradient;
     }
     
    wall_in
    {
        type       zeroGradient;
    }
    
    top_out
    {
        type       zeroGradient;
    }
}

// ************************************************************************* //
