/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;
 
    root            "";
    case            "";
    instance        "";
    local           "";
 
    class           dictionary;
    object          blockMeshDict;
}
  
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * 2022-09-02 Max Koch axisymm kartesian * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * *to be used with makeAxialMesh! * * //
// * * * * * * * * * * * * * * * * * * * *to be used with refine-startcellamount //
// * * * * making use of all cool macros gained so far (2020-04-22)  * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

changecom(//)changequote([,])
 
define(calc, [esyscmd(perl -e 'use Math::Trig; use Math::Round; printf ($1)')])
define(writeTheta, [esyscmd(echo '$1' > THETA)])
define(get_cell_amount, [esyscmd(python calc_n_by_grading.py $1 $2 $3)])
define(PI, 3.14159265358979323846264338327950288)

//# Origin for GCOi functions:
define(Ox, 0.)
define(Oy, 0.)
define(Oz, 0.)
//# define function to get circle point coordinates when having origin in (0 0 0)
//# GCP = getCirclePoint
//# GCPx = R * cos(phi [deg]) * cos(theta [rad]
define(GCOx, [calc(($1)*cos( ($2)/180.*PI ) *cos(($3)/180.*PI) + Ox)])
define(GCOy, [calc(($1)*sin( ($2)/180.*PI ) + Oy)])
define(GCOz, [calc(($1)*cos( ($2)/180.*PI ) *sin(($3)/180.*PI) + Oz)])
define(GCO, [GCOx($1,$2,$3) GCOy($1,$2,$3) GCOz($1,$2,$3)])

//# faces for hex when starting in the northeast down corner with vert 1
define(hexsouth, [($3 $4 $8 $7)])
define(hexwest,  [($3 $2 $6 $7)])
define(hexeast,  [($1 $5 $8 $4)])
define(hexnorth, [($1 $2 $6 $5)]) 
define(hexup,    [($7 $8 $5 $6)]) 
define(hexdown,  [($1 $4 $3 $2)]) 

define(VCOUNT, 0)
 
define(vlabel, [[// ]Vertex $1 = VCOUNT define($1, VCOUNT)define([VCOUNT], incr(VCOUNT))])

convertToMeters 1;




//# parameters that drive the mesh:
define(Rmax, _BUBBLE-RMAX)
define(XF,calc(_MESH-DOMAINSIZEFACTORRMAX * Rmax))
//  size of the mesh is XF
define(XFy,calc(0.5*XF))              // mesh end (domain C)
define(cellsize, _MESH-CELLSIZE)
define(cellamount, _REFINE-STARTCELLAMOUNT)
//#define(grading_factor,_MESH-GRADINGFACTOR)

//# derived:

define(theta, 2.0)
define(zex,calc(XF*atan(theta/180.*PI))) //# z-extension for theta=2degrees
writeTheta(theta)


//################### domain A
define(NUMx, calc(round(sqrt(cellamount))))
define(NUMy, NUMx)
//# cell width at x=Xi
// define(cw_X, cellsize)
//################### domain D
//# same for domain D
//#define(l_D, calc(XF-X)) 
//#define(Dgrd,calc(grading_factor*XF/X))
//#define(invDgrd,calc(1./Dgrd))
//#//
//#define(Dnum, get_cell_amount(Dgrd,l_D,cw_X))
//#define(cw_XF, calc(cw_X*Dgrd))

//# n=north, e=east, w=west, s=south, d/u=down/up
vertices
(
    (   0   XFy -zex)      vlabel(wun)
    (   0   XFy  zex)      vlabel(wus)
         
    (   0  -XFy -zex)      vlabel(wdn)
    (   0  -XFy  zex)      vlabel(wds)
    
    (  XF   XFy -zex)      vlabel(eun)
    (  XF   XFy  zex)      vlabel(eus)
         
    (  XF  -XFy -zex)      vlabel(edn)
    (  XF  -XFy  zex)      vlabel(eds)
);
 
blocks
( 
  //#A
  hex (edn wdn wds eds  eun wun wus eus)              (NUMx 1 NUMy)    simpleGrading (1 1 1)
);


edges                  
(
);
 
patches
(
    empty frontandback
    (    
        hexnorth(edn, wdn, wds, eds,  eun, wun, wus, eus) 
       hexsouth(edn, wdn, wds, eds,  eun, wun, wus, eus) 
       //#
    )
    
    patch side
    (  
        hexup(edn, wdn, wds, eds,  eun, wun, wus, eus) 
        hexeast(edn, eun, eus, eds,  eun, eun, eus, eus) 
        hexdown(edn, wdn, wds, eds,  eun, wun, wus, eus)
    )
    
    //patch wall
    //(
    //)
    
    empty axis
    (
       hexwest(edn, wdn, wds, eds,  eun, wun, wus, eus) 
    )
);   
     

mergePatchPairs
(
);

