#!/bin/bash
pi="3.14159265358979323846264338327950288"

start=$(date)

source $HOME/foam/foam-extend-_FOAM_EXTEND_VERSION/etc/bashrc

pVar="p_rgh"
rho2tildeVar="rho_gTilde"

if [ _ALLCLEANBEFOREORUN = "true" ];then
bash Allclean
fi

if [[ _DECOMPOSE-DECOMPOSE = "true" ]]; then
 parallel=true
fi

calculate_acoustic_compressibility ()
{
    freq=_ACOUSTICS-FREQUENCY
    rho_l0=_LIQUID-RHO
    compressibility=$(m4 <<< "esyscmd(perl -e 'printf ( $rho_l0 / (_LIQUID-GAMMA*( $pStat + _LIQUID-B )) )')")
    echo $compressibility
}
calculate_acoustic_soundspeed ()
{
    compressibility=$(calculate_acoustic_compressibility)
    soundspeed=$(m4 <<< "esyscmd(perl -e 'printf ( sqrt(1.0/$compressibility) )')")
    echo $soundspeed
}
calculate_acoustic_impedance ()
{
    rho_l0=_LIQUID-RHO
    soundspeed=$(calculate_acoustic_soundspeed)
    impedance=$(m4 <<< "esyscmd(perl -e 'printf ( $rho_l0 * $soundspeed ) ')")
    echo $impedance
}
calculate_acoustic_particle_velocity_amplitude ()
{
    freq=_ACOUSTICS-FREQUENCY
    rho_l0=_LIQUID-RHO
    compressibility=$(calculate_acoustic_compressibility)
    soundspeed=$(calculate_acoustic_soundspeed)
    impedance=$(calculate_acoustic_impedance)
    soundParticleVelocity_amp=$(m4 <<< "esyscmd(perl -e 'printf ( _LIQUID-PINF/ $impedance ) ')")
    echo $soundParticleVelocity_amp
}
calculate_acoustic_lambda ()
{
    freq=_ACOUSTICS-FREQUENCY
    rho_l0=_LIQUID-RHO
    compressibility=$(calculate_acoustic_compressibility)
    soundspeed=$(calculate_acoustic_soundspeed)
    lambda=$(m4 <<< "esyscmd(perl -e 'printf ( $soundspeed/$freq ) ')")
    echo $lambda
}
calculate_acoustic_k_vec ()
{
    lambda=$(calculate_acoustic_lambda)
    echo $(m4 <<< "esyscmd(perl -e 'printf ( 2.*$pi / $lambda ) ')")
}
calculate_acoustic_bessel_p_amplitude ()
{
    echo $(m4 <<< "esyscmd(perl -e 'printf ( -0.217230 * _ACOUSTICS-AMPLITUDEBAR * 1e5 ) ')")
}
calculate_acoustic_bessel_p_amplitude_current(){
    ampl=$(calculate_acoustic_bessel_p_amplitude)
    phaseBC=_ACOUSTICS-PHASEDEG #do not overwrite phase here because it is implemented in BC
    echo $(m4 <<< "esyscmd(perl -e 'printf ( $ampl * cos($phaseBC/180.*$pi) + _LIQUID-PINF ) ')")
}


copy_0backup ()
{
 echo -e "\ncopying 0/backup/ files..."
 cp 0/backup/alpha1.org 0/alpha1
 cp 0/backup/${pVar}.org 0/${pVar}
 bessel_amplitude_BC=$(calculate_acoustic_bessel_p_amplitude)
 bessel_current_amplitude_BC=$(calculate_acoustic_bessel_p_amplitude_current)
 sed -i "s/_ALLRUN-BCAMPLITUDE/$bessel_amplitude_BC/g" 0/${pVar}
 sed -i "s/_ALLRUN-BCCURRENTVALUE/$bessel_current_amplitude_BC/g" 0/${pVar}
 cp 0/backup/${rho2tildeVar}.org 0/${rho2tildeVar}
 cp 0/backup/U 0/U
 cp 0/backup/passiveScalar.org 0/passiveScalar
 if [ -d CAD ];then
    mkdir -p constant/triSurface
    cp CAD/_CAD-OBJECT constant/triSurface/
 fi
}


determine_offset() {
    offset=0.0
    if [ "_BUBBLE-DOUBLEBUBBLE" = "true" ];then
        offset=_BUBBLE-D_INIT
    fi
    echo $offset
}







### get solver commit version number: #####
thisdir=$(pwd)
cd ${WM_PROJECT_USER_DIR}/localMassCorr_working #$WM_PROJECT_DIR/applications/solvers/multiphase/localMassCorr_working
version_number=$(git log | head -n 1 | sed "s/commit //g")
cd $thisdir
echo -e "using solver version number $version_number.\nStoring into solver_version_number.info\n"
echo $version_number > solver_version_number.info
###########################################

meshFile=constant/polyMesh/_MESH-MESHFILE

copy_0backup

if [ "_MESH-EXECUTEBLOCKMESH" = "true" ];then
    echo "m4ing ..."
    
    if [[ $(python3 check_str_in_str.py "bessel" "_MESH-MESHFILE") = "" ]]
    then
        echo "ERROR: mesh file not suited for bessel function"
        exit 1
    fi
    
    m4 constant/polyMesh/_MESH-MESHFILE > constant/polyMesh/blockMeshDict
    
    echo "blockMeshing..."
    blockMesh > log.blockMesh
else
    echo "NOT blockMeshing"
fi

if [ "_MESH-USEGMSHFILE" = "true" ];then
    echo "meshing from geo file..."
    meshFile=geo/_MESH-MESHFILE
    gmsh -3  -format msh2 $meshFile > log.gmsh
    gmshToFoam ${meshFile%.geo}.msh >> log.gmsh
    changeDictionary > log.changeDictionary
fi

if [ "_MESH-STITCHMESH" = "true" ] ; then
    echo "stitching mesh by using stitchMesh.sh..."
    rm -f 0/cellDist
    bash stitchMesh.sh
fi

if [[ "_MESH-SNAPPYHEXMESH" = "true" && "_SNAPPY-BEFOREORAFTERMAKEAXIALMESH" = "before" ]]
then
    echo "preparing snappy..."
    rm -f 0/*.gz
    rm -rf 0/uniform
    copy_0backup
    echo "snappyHexMeshing ..."
    snappyHexMesh -overwrite > log.snappyHexMesh
    #cp -r $(python find_biggestNumber.py -p .)/polyMesh/* constant/polyMesh
    #ts=$(python find_biggestNumber.py -p .)
    #while [[ $ts != _CONTROLDICT-STARTTIME && $ts != "0.0" ]] ;do
    #    echo "rm -rf $ts"
    #    rm -rf $ts
    #    ts=$(python find_biggestNumber.py -p .)
    #done
    copy_0backup
fi

if [ "_MESH-MAKEAXIALMESH" = "true" ]
then
    echo "making axial mesh with angle 4 degrees and patch names frontandback"
    makeAxialMesh -wedge frontandback -wedgeAngle 4 -axis axis -overwrite > log.makeAxialMesh
#     echo "collapsingEdges ..."
#     collapseEdges 1e-9 180 -overwrite > log.collapseEdges
#     cp 0/polyMesh/* constant/polyMesh/ # <-important bec otherwise decomposePar wont write processor*/0 folders
#     rm -rf 0/polyMesh # <-important bec otherwise decomposePar wont write processor*/0 folders
#     checkMesh > log.checkMesh
#     sed -i "s/symmetryPlane/empty/g" constant/polyMesh/boundary
#     sed -i "s/symmetryPlane/empty/g" 0/polyMesh/boundary
#     echo $(grep -E "Zero|zero|skew|Skew" log.checkMesh)
#     exit 0
fi

if [[ "_MESH-SNAPPYHEXMESH" = "true" && "_SNAPPY-BEFOREORAFTERMAKEAXIALMESH" = "after" ]]
then
    echo "preparing snappy..."
    rm -f 0/*.gz
    rm -rf 0/uniform
    copy_0backup
    echo "snappyHexMeshing ..."
    snappyHexMesh -overwrite > log.snappyHexMesh
    #cp -r $(python find_biggestNumber.py -p .)/polyMesh/* constant/polyMesh
    #ts=$(python find_biggestNumber.py -p .)
    #while [[ $ts != _CONTROLDICT-STARTTIME && $ts != "0.0" ]] ;do
    #    echo "rm -rf $ts"
    #    rm -rf $ts
    #    ts=$(python find_biggestNumber.py -p .)
    #done
    copy_0backup
fi

if [ "_MESH-MAKEAXIALMESH" = "true" ]
then
    echo "makeAxialMesh part II:"
    echo "collapsingEdges ..."
    collapseEdges 1e-9 180 -overwrite > log.collapseEdges
    cp 0/polyMesh/* constant/polyMesh/ # <-important bec otherwise decomposePar wont write processor*/0 folders
    rm -rf 0/polyMesh # <-important bec otherwise decomposePar wont write processor*/0 folders
    checkMesh > log.checkMesh
    sed -i "s/symmetryPlane/empty/g" constant/polyMesh/boundary
    sed -i "s/symmetryPlane/empty/g" 0/polyMesh/boundary
    echo $(grep -E "Zero|zero|skew|Skew" log.checkMesh)
fi



echo -e "\nsetting fields..."

gamma=_GAS-GAMMA
pV=_TRANSPORTPROPERTIES-PV
pStat=_LIQUID-PINF
Rn=$(m4 <<< "esyscmd(perl -e 'printf ( _BUBBLE-RN * (101315./${pStat} )**(1./3.) )')")
sigma=_TRANSPORTPROPERTIES-SIGMA
#BVAN=0.0000364 # m^3/mol
muwater=_LIQUID-MU
TEMPREF=_TRANSPORTPROPERTIES-TREF
GASCONSTGENERAL=_TRANSPORTPROPERTIES-GASCONSTGENERAL # J/mol K
SPECGASCONST=_GAS-SPECGASCONST
beta=_GAS-BETA

pn=$(m4 <<< "esyscmd(perl -e 'printf (${pStat} + 2.*${sigma}/${Rn} -${pV}  )')")
RMax=_BUBBLE-RMAX
R=_BUBBLE-RSTART
width=_FUNKYSETFIELDS-WIDTHOFINTERFACE # width of interface
Uif=_FUNKYSETFIELDS-U_INTERFACE

rho_n=$(m4 <<< "esyscmd(perl -e 'printf ( $pn/($SPECGASCONST*$TEMPREF*(1.-$beta))  )')")
rho_min=$(m4 <<< "esyscmd(perl -e 'printf ( $rho_n * ($Rn/$RMax)**3. )')")
pBubble=$(m4 <<< "esyscmd(perl -e 'printf (   ${pn}*((${Rn}**3. - ${beta}*${Rn}**3.)/(${R}**3. - ${beta}*${Rn}**3.))**${gamma}  )')") #1e9 #$Q

nCells=$(grep "nCells" log.blockMesh)

echo "R0               = $R       "
echo "Rn               = $Rn      "
echo "p_n              = $pn      "
echo "pBubble          = $pBubble "
echo "$nCells" # in nCells there is already in: "nCells: "
echo "cells now: $(checkMesh | grep "cells:" | sed "s/\s//g" | sed "s/cells://g")"

time=_CONTROLDICT-STARTTIME

echo "" > log.setFields

offset=$(determine_offset )
dist=$offset

x_coord="pos().x"
y_coord="pos().y"
z_coord="pos().z"
sq_x="$x_coord*$x_coord"
sq_y="($y_coord-${dist})*($y_coord-${dist})"
sq_z="$z_coord*$z_coord"

distance_vector="vector($z_coord, $y_coord, $z_coord)"
radial_distance="sqrt($sq_x + $sq_y + $sq_z)"
unit_vector="$distance_vector / $radial_distance"

echo "--- setting ambient field $pvar ----"
echo "... setting acoustic standing wave bessel -----"
phase=$(m4 <<< "esyscmd(perl -e 'printf ( _ACOUSTICS-PHASEDEG / 180.*$pi  )')")
freq=_ACOUSTICS-FREQUENCY
rho_l0=_LIQUID-RHO
soundParticleVelocity_amp=0.0 #$(calculate_acoustic_particle_velocity_amplitude)
lambda=$(calculate_acoustic_lambda)
k_vec=$(m4 <<< "esyscmd(perl -e 'printf (  2. * $pi / $lambda )')")
# prefac=$(m4 <<< "esyscmd(perl -e 'printf (  sqrt(2. /( $pi * $k_vec)) )')")
prefac=$(m4 <<< "esyscmd(perl -e 'printf (  1./$k_vec )')")
funkySetFields -case . -field $pVar -expression "$pStat + cos($phase) * _ACOUSTICS-AMPLITUDEBAR *1e5 *$prefac *sin($k_vec *$radial_distance)/$radial_distance" \
                -condition "$radial_distance >$(m4 <<< "esyscmd(perl -e 'printf (  0.5* $R )')") " -time $time -keepPatches >> log.setFields

echo "---- setting field U to zero ----"
funkySetFields -case . -field U -expression "0.0 * vector(0,1,0)" -time $time -keepPatches >> log.setFields

echo "---- setting alpha1 field for a bubble with R = $R at D_init = $dist ----"
if [ "_BUBBLE-ELLIPSE" = "true" ];then
    e_x=_BUBBLE-EXCENTRICITY
    Ry=$( m4 <<<  "esyscmd(perl -e 'printf $R/$e_x**(2/3)')")
    Rx=$Ry*$e_x
    #funkySetFields -case . -field alpha1 -expression "pos().x*pos().x/$e_x*$e_x+pos().y*pos().y/$e_y*$e_y<$Rstart*$Rstart?0:1" -time $time -keepPatches >> setFields.log
    funkySetFields -case . -field alpha1 -expression "$sq_x + $sq_y*$e_x*$e_x<$Rx*$Rx?0:1" -time $time -keepPatches >> setFields.log
else 
    funkySetFields -case . -field alpha1 -expression "0.5*(tanh(($radial_distance-${R})*5.9/${width})+1)"\
                    -time $time -keepPatches >> log.setFields  #-condition 'pos().x <= 50e-6' 
fi

echo "---- setting pressure with same energy for discretization ----"
if [ $(python3 <<< "print($R > 0.0)") == "True" ]
then
    echo "-- reading real discretized alpha2-volume (0/alpha2_vol_t0)"
    p_init=$pBubble
    Vn=$(m4 <<< "esyscmd(perl -e 'printf (   4.*${pi}/3.* ${Rn}**(3.)  )')")
    Vinit=$(m4 <<< "esyscmd(perl -e 'printf (   4.*${pi}/3.* ${R}**(3.)  )')")
    Einit=$(m4 <<< "esyscmd(perl -e 'printf (   ($p_init * $Vinit - $pn * $Vn )/($gamma -1.) + $pStat*($Vinit - $Vn)  )')")
    
    get_alpha2_vol_t0 > log.get_alpha2_vol_t0
    true_alpha2_vol=$(cat 0/alpha2_vol_t0)
    if [ "_MESH-MESHDIMS" = "2D" ];then
        if [ ! -e THETA ];then
            echo "ERROR: alter your meshDict.m4 such that it writes theta into THETA"
            exit 1
        fi
        theta=$(cat THETA)
        Vinitdiscr=$(m4 <<< "esyscmd(perl -e 'printf (  $true_alpha2_vol *180./${theta}  )')")
    elif [ "_MESH-MESHDIMS" = "1D" ];then
        if [ ! -e THETA ];then
            echo "ERROR: alter your meshDict.m4 such that it writes theta into THETA"
            exit 1
        fi
        theta=$(cat THETA)
        theta_rad=$(m4 <<< "esyscmd(perl -e 'printf (  ${theta}*${pi}/180.  )')")
        Vinitdiscr=$(m4 <<< "esyscmd(perl -e 'use Math::Trig; printf (  ${true_alpha2_vol}*${pi}/(tan(${theta_rad}))**2  )')")
    fi
    
    Rdiscr=$(m4 <<< "esyscmd(perl -e 'printf (   (${Vinitdiscr}/(4.*${pi})*3)**(1./3.)  )')")
    p_initdiscr=$(m4 <<< "esyscmd(perl -e 'printf (   (($gamma -1.)*($Einit - $pStat*($Vinitdiscr-$Vn)) + $pn *$Vn )/$Vinitdiscr  )')")
    echo "python get_true_Rn_from_R0_p0_Rn_sigma.py --R0 $Rdiscr -s $sigma --p0 $p_initdiscr"
    Rndiscr=$(python get_true_Rn_from_R0_p0_Rn_sigma.py --R0 $Rdiscr -s $sigma --p0 $p_initdiscr --pinf $pStat )
    echo $Rndiscr > Rn_export
    pndiscr=$(m4 <<< "esyscmd(perl -e 'printf (${pStat} + 2.*${sigma}/${Rndiscr} -${pV}  )')")
    echo "R_0new           = $R "
    echo "R_n_new          = $Rndiscr "
    echo "pBubble_old      = $pBubble"
    echo "pBubble_new      = $p_initdiscr "
    funkySetFields -case . -field $pVar -expression "${p_initdiscr}*(1.-alpha1)+${pVar}*alpha1"\
                -time $time -keepPatches >> log.setFields
    pBubble=$p_initdiscr
    Rn=$Rndiscr
    pn=$pndiscr
fi

if [ "_BUBBLE-DOUBLEBUBBLE" = "true" ]
then
    echo "---- putting second bubble of same energy ----"
    dist=-$offset
    sq_x="$x_coord*$x_coord"
    sq_y="($y_coord-${dist})*($y_coord-${dist})"
    sq_z="$z_coord*$z_coord"
    
    distance_vector="vector($z_coord, $y_coord-$dist, $z_coord)"
    radial_distance="sqrt($sq_x + $sq_y + $sq_z)"
    unit_vector="$distance_vector / $radial_distance"
    
    funkySetFields -case . -field alpha1 -expression "0.5*(tanh(($radial_distance-${R})*5.9/${width})+1)"\
                    -condition 'pos().y <= 0.0' -time $time -keepPatches >> log.setFields  
    funkySetFields -case . -field $pVar -expression "${pBubble}*(1.-alpha1)+${pVar}*alpha1"\
                    -condition 'pos().y <= 0.0' -time $time -keepPatches >> log.setFields
fi

#-----------------passiveScalar part: -------------------
Y=$(m4 <<< "esyscmd(perl -e 'printf ( 1.5 *(${RMax}  ) + $dist )' )")
echo "---- passiveScalar part till Y: $Y ----"
funkySetFields -case . -field passiveScalar -expression "1.0" -time 0 -keepPatches  >> log.setFields
funkySetFields -case . -field passiveScalar -expression "pos().y/$Y" -time 0 -keepPatches  \
                -condition "pos().y < $Y " >> log.setFields
#---------------------------------------------------------

###############################################
###############################################
if [[ "_DECOMPOSE-METHOD" == "manual" ]]
then
    python _DECOMPOSE-MANUALSCRIPT
    #cp constant/cellDist 0/
    #sed -i "s/constant/0/g" 0/cellDist
fi


if [ $parallel ];then
    echo "decomposing with xyz: _DECOMPOSE-XYZ by method: _DECOMPOSE-METHOD"
    decomposePar > log.decomposePar


    if [ ! -d processor0/constant/polyMesh ]
    then
        echo "writing mesh to processor*/constant because it wasn't created..."
        for coreDir in processor*; do 
            mkdir -p $coreDir/constant
            mv $coreDir/0/polyMesh $coreDir/constant
            rm -rf $coreDir/0
        done
    fi


    threads=$(grep "^numberOfSubdomains" system/decomposeParDict | sed "s/^numberOfSubdomains *\([0-9]*\);/\1/")
    method=$( grep "^method" system/decomposeParDict | sed "s/^method *\([a-zA-Z]*\);/\1/")
    echo "slots = ${threads}, decomposed with $method"
    if [ -e constant/dynamicMeshDict ]
    then
        for i in proc*
        do
            cp constant/dynamicMeshDict $i/constant/
        done
    fi
    
    if [ "_MESH-SNAPPYHEXMESH" == "true" ]
    then
        mkdir -p constant/polyMesh/temp
        mv constant/polyMesh/*.gz      constant/polyMesh/temp
        mv constant/polyMesh/boundary  constant/polyMesh/temp
    fi
fi

echo "preparation of the case needed time:"
echo "from $start"
echo "till $(date)"
echo "----- DONE creating case -----"

# ----------------------------------------------------------------- end-of-file
