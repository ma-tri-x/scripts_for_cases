#!/bin/bash
pi="3.14159265358979323846264338327950288"

source $HOME/foam/foam-extend-_FOAM_EXTEND_VERSION/etc/bashrc

if [ _ALLCLEANBEFOREORUN = "true" ];then
bash Allclean
fi

if [[ _DECOMPOSE-DECOMPOSE = "true" ]]; then
 parallel=true
fi

if [ $parallel ];then  bash decompose.sh _DECOMPOSE-XYZ _DECOMPOSE-METHOD; fi

. $WM_PROJECT_DIR/bin/tools/RunFunctions
application=`getApplication`


runRefineMesh ()
{
    #echo "Running refineMesh on $PWD"
    refineMesh -dict > log.refineMesh 
}

copy_0backup ()
{
 echo -e "\ncopying 0/backup/ files..."
 cp 0/backup/alpha1.org 0/alpha1
 cp 0/backup/p.org 0/p_rgh
 cp 0/backup/rho_gTilde.org 0/rho_gTilde
#  cp 0/backup/rho_gTilde.org 0/rho2Tilde
#  cp 0/backup/rho_gSource.org 0/rho_gSource
 cp 0/backup/U 0/U
 cp 0/backup/passiveScalar 0/passiveScalar
}

### get solver commit version number: #####
thisdir=$(pwd)
if [[ $application == "localMassCorr_working" || $application == "localMassCorr_working_opt" ]]
then
    cd $WM_PROJECT_DIR/applications/solvers/multiphase/localMassCorr_working
    version_number=$(git log | head -n 1 | sed "s/commit //g")
    cd $thisdir
    echo $version_number > solver_version_number.info
fi
###########################################

meshFile=constant/polyMesh/_MESH-MESHFILE

if [ "_OTHERCONTROLS-USECONSTANTTHETA" = "true" ]
then
    echo "overwriting adaptive theta in mesh with _OTHERCONTROLS-CONSTANTTHETA degrees"
    sed -i "s#//_ALLRUN-OVERWRITETHETA#define(theta, calc(_OTHERCONTROLS-CONSTANTTHETA /PI*180.))#g" $meshFile
fi

echo "m4ing ..."
m4 constant/polyMesh/_MESH-MESHFILE > constant/polyMesh/blockMeshDict

copy_0backup
 
if [ "_MESH-EXECUTEBLOCKMESH" = "true" ];then
echo "blockMeshing..."
blockMesh > log.blockMesh
else
echo "NOT blockMeshing"
fi

if [ "_MESH-STITCHMESH" = "true" ] ; then
    echo "stitching mesh by using stitchMesh.sh..."
    rm -f 0/cellDist
    bash stitchMesh.sh
fi

if [ "_MESH-REFINEMESH" = "true" ]
then
    echo "prepare refining mesh..."
    #n0=_MESH-STARTCELLAMOUNT
    #csgoal=_MESH-CELLSIZEGOAL
    #size=_MESH-SIZE
    iterations=_REFINE-REFINETIMES #$(m4 <<< "esyscmd(perl -e 'use Math::Round; printf (  round(log($size/($n0**(1./3.))/$csgoal)/log(2.)) )')")
    iterations=`expr $iterations + 1`
    if [ $iterations -gt 13 ]
    then
        echo "impossible number of iterations: $iterations > 10"
        exit 1
    fi
    refineUntil=_REFINE-REFINEUNTIL
    refineFrom=_REFINE-REFINEFROM
    j=1
    while [ $j -lt $iterations ] ; do
        echo "cp system cellSetDict.1.backup system/cellSetDict.$j"
        cp system/cellSetDict.1.backup system/cellSetDict.$j
        sed -i "s/dinit/_BUBBLE-D_INIT/g" system/cellSetDict.$j
        refDist=$(m4 <<< "esyscmd(perl -e 'printf (  (${refineUntil} - ${refineFrom} )*(($j - $iterations )/( $iterations -1.))**2 +$refineFrom )')")
        sed -i "s/rrradius/$refDist/g" system/cellSetDict.$j
#         refDist=$(m4 <<< "esyscmd(perl -e 'printf ( $refDist - $distOfRefineStep  )')")
        j=`expr $j + 1`
    done
    j=1
    while [ -e system/cellSetDict.$j ] ; do
        echo "refining step $j..."
        cp system/cellSetDict.$j system/cellSetDict
        cellSet > log.cellSet
        mv log.cellSet log.cellSet.$j
        echo "refining mesh..."
        runRefineMesh # eigene Funktion! Siehe oben
        mv log.refineMesh log.refineMesh.$j
        cp -r $(python find_biggestNumber.py -p .)/polyMesh/* constant/polyMesh
        rm -rf $(python find_biggestNumber.py -p .)
        j=`expr $j + 1`
    done
fi

if [ "_MESH-MAKEAXIALMESH" = "true" ]
then
    echo "making axial mesh with angle 4 degrees and patch names frontandback"
    makeAxialMesh -wedge frontandback -wedgeAngle 4 -axis axis > log.makeAxialMesh
    echo "collapsingEdges ..."
    collapseEdges 1e-8 180 -overwrite > log.collapseEdges
    if [ -d 0/polyMesh ]
    then
        cp 0/polyMesh/* constant/polyMesh/ # <-important bec otherwise decomposePar wont write processor*/0 folders
        sed -i "s/symmetryPlane/empty/g" 0/polyMesh/boundary
        rm -rf 0/polyMesh # <-important bec otherwise decomposePar wont write processor*/0 folders
    fi
    checkMesh > log.checkMesh
    sed -i "s/symmetryPlane/empty/g" constant/polyMesh/boundary
    echo $(grep -E "Zero|zero|skew|Skew" log.checkMesh)
#     exit 0
fi

if [ "_MESH-SNAPPYHEXMESH" = "true" ]
then
    echo "preparing snappy..."
    rm -f 0/*.gz
    rm -rf 0/uniform
    copy_0backup
    echo "snappyHexMeshing ..."
    snappyHexMesh -overwrite > log.snappyHexMesh
    #cp -r $(python find_biggestNumber.py -p .)/polyMesh/* constant/polyMesh
    #ts=$(python find_biggestNumber.py -p .)
    #while [[ $ts != _CONTROLDICT-STARTTIME && $ts != "0.0" ]] ;do
    #    echo "rm -rf $ts"
    #    rm -rf $ts
    #    ts=$(python find_biggestNumber.py -p .)
    #done
    copy_0backup
fi

# exit 0
    
pVar="p_rgh"

echo -e "\nsetting fields..."

gamma=_GAS-GAMMA
Rn=_BUBBLE-RN
pV=_TRANSPORTPROPERTIES-PV
pStat=_LIQUID-PINF
sigma=_TRANSPORTPROPERTIES-SIGMA
#BVAN=0.0000364 # m^3/mol
muwater=_LIQUID-MU
TEMPREF=_TRANSPORTPROPERTIES-TREF
GASCONSTGENERAL=_TRANSPORTPROPERTIES-GASCONSTGENERAL # J/mol K
SPECGASCONST=_GAS-SPECGASCONST
beta=_GAS-BETA

pn=$(m4 <<< "esyscmd(perl -e 'printf (${pStat} + 2.*${sigma}/${Rn} -${pV}  )')")
RMax=_BUBBLE-RMAX
R=_BUBBLE-RSTART
width=_FUNKYSETFIELDS-WIDTHOFINTERFACE # width of interface
Uif=_FUNKYSETFIELDS-U_INTERFACE

if [ "_BUBBLE-BOXBUBBLE" = 'true' ];then
    echo "Converting volume to a grid fitting box volume..."
    cellsize=_MESH-CELLSIZE
    sphereVol=$(m4 <<< "esyscmd(perl -e 'printf (   4.*${pi}/3.*(${R})**3  )')")
    if [ "_MESH-MESHDIMS" = "3D" ];then
        boxEdgeLength_theory=$(m4 <<< "esyscmd(perl -e 'printf (   (${sphereVol})**(1./3.)  )')")
        number_of_fitting_cells=$(m4 <<< "esyscmd(perl -e 'printf (   int(${boxEdgeLength_theory}/${cellsize})  )')")
        boxEdgeLength_true=$(m4 <<< "esyscmd(perl -e 'printf (   ${number_of_fitting_cells}*${cellsize}  )')")
        boxVol=$(m4 <<< "esyscmd(perl -e 'printf (   ${boxEdgeLength_true}**3  )')")
        R=$(m4 <<< "esyscmd(perl -e 'printf (   (${boxVol}/(4.*${pi})*3)**(1./3.)  )')")
        echo "volume change from theoretical sphere to box: $(m4 <<< "esyscmd(perl -e 'printf (   ${boxVol}/${sphereVol}  )')")"
    elif [ "_MESH-MESHDIMS" = "2D" ];then
        #box is now cylinder: boxEdgeLength_theory=radius
        height=$(m4 <<< "esyscmd(perl -e 'printf (   int(2*${R}/${cellsize})*$cellsize  )')")
        boxEdgeLength_theory=$(m4 <<< "esyscmd(perl -e 'printf (   sqrt(${sphereVol}/${height}/${pi})  )')")
        number_of_fitting_cells=$(m4 <<< "esyscmd(perl -e 'printf (   int(${boxEdgeLength_theory}/${cellsize})  )')")
        boxEdgeLength_true=$(m4 <<< "esyscmd(perl -e 'printf (   ${number_of_fitting_cells}*${cellsize}  )')")
        boxVol=$(m4 <<< "esyscmd(perl -e 'printf (   ${pi}*${boxEdgeLength_true}**2 * ${height} )')")
        R=$(m4 <<< "esyscmd(perl -e 'printf (   (${boxVol}/(4.*${pi})*3)**(1./3.)  )')")
        echo "volume change from theoretical sphere to box: $(m4 <<< "esyscmd(perl -e 'printf (   ${boxVol}/${sphereVol}  )')")"
    else
        echo "boxBubble not yet implemented for meshdims other than 2D and 3D"
        exit 1
    fi
fi


pAtMax=$(m4 <<< "esyscmd(perl -e 'printf (   ${pn}*((${Rn}**3. - ${beta}*${Rn}**3.)/(${RMax}**3. - ${beta}*${Rn}**3.))**${gamma}  )')")
rho_n=$(m4 <<< "esyscmd(perl -e 'printf ( $pn/($SPECGASCONST*$TEMPREF*(1.-$beta))  )')")
rho_min=$(m4 <<< "esyscmd(perl -e 'printf ( $rho_n * ($Rn/$RMax)**3. )')")
Z=$(m4 <<< "esyscmd(perl -e 'printf (   (${RMax}/${R})**(3.)  )')")
Q=$(m4 <<< "esyscmd(perl -e 'printf (   ${pn}*((${Rn}**3. - ${beta}*${Rn}**3.)/(${RMax}**3. - ${beta}*${Rn}**3.))**${gamma}  )')")
# current pressure of Bubble (if you do not start at RMax)
pBubble=$(m4 <<< "esyscmd(perl -e 'printf (   ${pn}*((${Rn}**3. - ${beta}*${Rn}**3.)/(${R}**3. - ${beta}*${Rn}**3.))**${gamma}  )')") #1e9 #$Q
Pm=$(m4 <<< "esyscmd(perl -e 'printf ( ${pStat} + 2.*${sigma}/${R} + 4.*${muwater}*${Uif}/${R} -${pV})' )")



nCells=$(grep "nCells" log.blockMesh)

echo "p_n              = $pn      "
echo "beta             = $beta    "
echo "RMax             = $RMax    "
echo "R                = $R       "
echo "widthOfInterface = $width   "
echo "Uif              = $Uif     "
echo "pAtRMax          = $pAtMax  "
echo "rho_n            = $rho_n   "
echo "rho_min          = $rho_min "
echo "Z                = $Z       "
echo "Q                = $Q       "
echo "pBubble          = $pBubble "
echo "Pm               = $Pm      "
echo $nCells
echo "cells now: $(checkMesh | grep "cells:" | sed "s/\s//g" | sed "s/cells://g")"

time=_CONTROLDICT-STARTTIME

if [ "_MAPFIELDS-MAPFIELDS" = "false" ]
then
    echo "" > log.setFields
    offset=_BUBBLE-D_INIT
    if [ "_MESH-MESHFILE" = "blockMeshDict_axisymm_ChCore.m4" ]
    then
        offset=$(m4 <<< "esyscmd(perl -e 'printf ( $R + 1e-6 )')")
    fi 
    if [ $(python check_str_in_str.py "blockMeshDict_axisymm_coreCart_reg_unbound" "_MESH-MESHFILE") ]
    then
        offset=0.0
    fi 
    dist=$offset

    unit_vector="vector(pos().x,pos().y-$dist,pos().z)/\
                (sqrt(pos().x*pos().x +\
                    (pos().y-${dist})*(pos().y-${dist}) +\
                        pos().z*pos().z))"
    distance_vector="vector(pos().x,pos().y-$dist,pos().z)"
    radial_distance="sqrt(pos().x*pos().x + \
                    (pos().y-${dist})*(pos().y-${dist}) + pos().z*pos().z)"

    if [ "_FUNKYSETFIELDS-CYLINDERPLASMA" = "true" ]
    then
        cyl_h=_BUBBLE-PLASMAHEIGHT
        cyl_rad=$(m4 <<< "esyscmd(perl -e 'printf ( sqrt(4.*${R}**3/(3.*${cyl_h})) )')")
        funkySetFields -case . -field alpha1 -expression "1"\
                        -time $time -keepPatches >> log.setFields  #-condition 'pos().x <= 50e-6' 
        funkySetFields -case . -field alpha1 -expression "0"\
                        -time $time -keepPatches -condition "pos().x <= ${cyl_rad} && pos().y <= ${cyl_h}/2. + $offset && pos().y >= $offset - ${cyl_h}/2."  >> log.setFields  #
    else
        funkySetFields -case . -field alpha1 -expression "0.5*(tanh(($radial_distance-${R})*5.9/${width})+1)"\
                        -time $time -keepPatches >> log.setFields  #-condition 'pos().x <= 50e-6' 
    fi

    if [ "_BUBBLE-BOXBUBBLE" = "true" ];then
        if [ "_MESH-MESHDIMS" = "3D" ];then
            blhalf=$(m4 <<< "esyscmd(perl -e 'printf ( $boxEdgeLength_true / 2. )')") 
            funkySetFields -case . -field alpha1 -expression "1.0" -time $time -keepPatches >> log.setFields
            funkySetFields -case . -field alpha1 -expression "0.0" -time $time -keepPatches \
            -condition "pos().x <= $blhalf && pos().x >= -$blhalf && \
            pos().y <= $blhalf +$dist && pos().y >= -$blhalf+$dist && \
            pos().z <= $blhalf && pos().z >= -$blhalf " >> log.setFields  #-condition 'pos().x <= 50e-6' 
        elif [ "_MESH-MESHDIMS" = "2D" ];then
            hgthalf=$(m4 <<< "esyscmd(perl -e 'printf ( $height / 2. )')") 
            bl=$boxEdgeLength_true
            funkySetFields -case . -field alpha1 -expression "1.0" -time $time -keepPatches >> log.setFields
            funkySetFields -case . -field alpha1 -expression "0.0" -time $time -keepPatches \
            -condition "pos().x <= $bl  && \
            pos().y <= $hgthalf+$dist && pos().y >= -$hgthalf+$dist " >> log.setFields  #-condition 'pos().x <= 50e-6' 
        fi
    else
        funkySetFields -case . -field alpha1 -expression "0.5*(tanh(($radial_distance-${R})*5.9/${width})+1)"\
                        -time $time -keepPatches >> log.setFields  #-condition 'pos().x <= 50e-6' 
    fi
    funkySetFields -case . -field U      -expression "0.*vector(0,1,0)" -keepPatches -time $time >> log.setFields 


    if [ "_FUNKYSETFIELDS-PRESSUREPROFILE" = "developed" ]
    then
        echo "---- using historically developed pressure profile ----"
    #        (1.-alpha1)*${pBubble} + alpha1*
        funkySetFields -case . -field $pVar  -expression "
        (
        ${R}/(-3.*$radial_distance)
        * (  (${Q}*pow(${Z},${gamma})*(3.*${gamma}-4) + ${Q}*${Z})/(1-${gamma}) - (${Z}-4)*${Pm} )   
        + ${pStat} 
        - pow(${R},4) / (3.*pow($radial_distance,4)) * 
        ( ${Pm}*(${Z}-1)-${Q}*(${Z} -pow(${Z},${gamma}))/(1-${gamma}) )
        )"  -time $time -keepPatches -condition "$radial_distance >= ${R}" >> log.setFields

        funkySetFields -case . -field $pVar  -expression "${pBubble}" -time $time -keepPatches -condition "
        $radial_distance < ${R}" >> log.setFields
        funkySetFields -case . -field $pVar  -expression "2.5" -time $time -keepPatches \
                    -condition "${pVar} < 2.5" >> log.setFields
    else
        echo "---- using theta jump pressure profile ----"
        get_alpha2_vol_t0 > log.get_alpha2_vol_t0
        true_alpha2_vol=$(cat 0/alpha2_vol_t0)
        if [ "_MESH-MESHDIMS" = "2D" ];then
            if [ ! -e THETA ];then
                echo "ERROR: alter your meshDict.m4 such that it writes theta into THETA"
                exit 1
            fi
            theta=$(cat THETA)
            true_alpha2_vol=$(m4 <<< "esyscmd(perl -e 'printf (  $true_alpha2_vol *180./${theta}  )')")
        elif [ "_MESH-MESHDIMS" = "1D" ];then
            if [ ! -e THETA ];then
                echo "ERROR: alter your meshDict.m4 such that it writes theta into THETA"
                exit 1
            fi
            theta=$(cat THETA)
            theta_rad=$(m4 <<< "esyscmd(perl -e 'printf (  ${theta}*${pi}/180.  )')")
            true_alpha2_vol=$(m4 <<< "esyscmd(perl -e 'use Math::Trig; printf (  ${true_alpha2_vol}*${pi}/(tan(${theta_rad}))**2  )')")
        fi
        Vn=$(m4 <<< "esyscmd(perl -e 'printf (   4.*${pi}/3.* ${Rn}**(3.)  )')")
        V0=$(m4 <<< "esyscmd(perl -e 'printf (   4.*${pi}/3.* ${R}**(3.)  )')")
        R=$(m4 <<< "esyscmd(perl -e 'printf (   (${true_alpha2_vol}/(4.*${pi})*3)**(1./3.)  )')")
        Ebubble=$(m4 <<< "esyscmd(perl -e 'printf (   ($pBubble * $V0 - $pn * $Vn )/($gamma -1.)  )')")
        pBubble=$(m4 <<< "esyscmd(perl -e 'printf (   ($Ebubble * ($gamma -1.) + $pn *$Vn )/$true_alpha2_vol  )')")
        echo "python get_true_Rn_from_R0_p0_Rn_sigma.py --R0 $R -s $sigma --p0 $pBubble"
        Rn=$(python get_true_Rn_from_R0_p0_Rn_sigma.py --R0 $R -s $sigma --p0 $pBubble --pinf $pStat )
        echo $Rn > Rn_export
        pn=$(m4 <<< "esyscmd(perl -e 'printf (${pStat} + 2.*${sigma}/${Rn} -${pV}  )')")
        echo "R_0new           = $R "
        echo "R_n_new          = $Rn "
        echo "pBubble          = $pBubble "
        funkySetFields -case . -field $pVar -expression "${pBubble}*(1.-alpha1)+${pStat}*alpha1"\
                    -time $time -keepPatches >> log.setFields
    fi

    ##############################################
    dist=$offset
    if [ "_FUNKYSETFIELDS-UPROFILE" = "mirrorbubble" ]
    then
        echo "---- using Christianes U profile ----"
        funkySetFields -case . -field U -expression "2.*${Uif}*${R}*${R}*$distance_vector/pow(pow(pos().x,2) + pow(pos().y-${dist},2) + pow(pos().z,2),1.5)" -condition "$radial_distance >= ${R}" -keepPatches -time $time >> log.setFields

        funkySetFields -case . -field U -expression "${Uif}*( $distance_vector/(${R}) +         ${R}*${R}*$distance_vector/pow(pow(pos().x,2) + pow(pos().y+${dist},2) + pow(pos().z,2),1.5) )"             -condition "$radial_distance < ${R}"              -keepPatches -time $time >> log.setFields

        #funkySetFields -case . -field ${pVar} -expression\
        #"${pBubble}*(1.-alpha1)+alpha1*${pStat}" -time $time -keepPatches >> log.setFields
    elif [ "_FUNKYSETFIELDS-UPROFILE" = "wicked" ]
    then
        echo "---- using wicked U profile with decay _OTHERCONTROLS-DECAYWICKED ----"

        funkySetFields -case . -field U -expression \
            "${Uif}*$unit_vector*exp(-($radial_distance - $R)*2./_OTHERCONTROLS-DECAYWICKED)"\
            -condition "$radial_distance >= ${R}" \
            -keepPatches -time $time >> log.setFields

        funkySetFields -case . -field U -expression \
            "${Uif}/${R}*$distance_vector"\
                -condition "$radial_distance < ${R}" \
                -keepPatches -time $time >> log.setFields
    elif [ "_FUNKYSETFIELDS-UPROFILE" = "inletoutlet" ]
    then
        echo "---- using inletoutlet U profile ----"
        funkySetFields -case . -field U -expression "_OTHERCONTROLS-INLETU*vector(0,1,0)" -keepPatches -time $time >> log.setFields
    else
        echo "---- using simple U profile where U > 0 ----"

        funkySetFields -case . -field U -expression \
            "${Uif}*$unit_vector*$R/\
            pow($radial_distance,1.0)"\
            -condition "$radial_distance >= ${R}" \
            -keepPatches -time $time >> log.setFields

        funkySetFields -case . -field U -expression \
            "${Uif}/${R}*$distance_vector"\
                -condition "$radial_distance < ${R}" \
                -keepPatches -time $time >> log.setFields
    fi
    if [ -e 0/amrAllow ]
    then
            amrDisallowDown=_MESH-AMRDISALLOWDOWN
            amrDisallowUp=_MESH-AMRDISALLOWUP
            amrDisallowRight=_MESH-AMRDISALLOWRIGHT
            funkySetFields -case . -field amrAllow -expression "1" -time 0 -keepPatches  \
                                >> sc_log.setFields
            funkySetFields -case . -field amrAllow -expression "0" -time 0 -keepPatches  \
                    -condition "pos().y < $amrDisallowUp && pos().y > $amrDisallowDown \
                                && pos().x < $amrDisallowRight " >> sc_log.setFields
    fi
    if [[ "_DECOMPOSE-METHOD" == "manual" ]]
    then
        python _DECOMPOSE-MANUALSCRIPT
        #cp constant/cellDist 0/
        #sed -i "s/constant/0/g" 0/cellDist
    fi
    #-----------------passiveScalar part: -------------------
    #X=$(m4 <<< "esyscmd(perl -e 'printf ( 2.*${RMax} )' )")
    #Y=$(m4 <<< "esyscmd(perl -e 'printf ( 1.5 *(${RMax} + _BUBBLE-D_INIT ) )' )")
    Y=$(m4 <<< "esyscmd(perl -e 'printf ( 1.5 *(${RMax}  ) )' )")
    echo "---- passiveScalar part till X,Y: $X,$Y ----"

    funkySetFields -case . -field passiveScalar -expression "1.0" -time 0 -keepPatches  >> log.setFields
    funkySetFields -case . -field passiveScalar -expression "pos().y/$Y" -time 0 -keepPatches  \
                    -condition "pos().y < $Y " >> log.setFields
    #---------------------------------------------------------
    ###############################################
    ###############################################

else
    startTime=_CONTROLDICT-STARTTIME
    sourceDir=_MAPFIELDS-SOURCEDIR
    thisdir=$(pwd)
    cd $sourceDir
    reconstructPar -time $startTime > log.reconstructPar
    cd $thisdir
    if [ ! -d $startTime ]
    then 
        mkdir $startTime
        cp 0/* $startTime
    fi
    echo "---- mapping fields with $sourceDir _MAPFIELDS-OPTIONS ........"
    mapFields $sourceDir _MAPFIELDS-OPTIONS > log.mapFields
fi


if [ $parallel ];then
    echo "decomposing with xyz: _DECOMPOSE-XYZ by method: _DECOMPOSE-METHOD"
    decomposePar > log.decomposePar


    if [ ! -d processor0/constant/polyMesh ]
    then
        echo "writing mesh to processor*/constant because it wasn't created..."
        for coreDir in processor*; do 
            mkdir -p $coreDir/constant
            mv $coreDir/0/polyMesh $coreDir/constant
            rm -rf $coreDir/0
        done
    fi


    slots=$(grep "^numberOfSubdomains" system/decomposeParDict | sed "s/^numberOfSubdomains *\([0-9]*\);/\1/")
    method=$( grep "^method" system/decomposeParDict | sed "s/^method *\([a-zA-Z]*\);/\1/")
    echo "slots = ${slots}, decomposed with $method"
    if [ -e constant/dynamicMeshDict ]
    then
        for i in proc*
        do
            cp constant/dynamicMeshDict $i/constant/
        done
    fi
    
    if [ "_MESH-SNAPPYHEXMESH" == "true" ]
    then
        mkdir -p constant/polyMesh/temp
        mv constant/polyMesh/*.gz      constant/polyMesh/temp
        mv constant/polyMesh/boundary  constant/polyMesh/temp
    fi
fi

    
if [ "_RUN_CALC_IN_ALLRUN" == "true" ];then
a=$(date)
    if [ "_DECOMPOSE-DECOMPOSE" = "true" ];then
        rm constant/polyMesh/*.gz #important for dynamicRefine2DMesh to work.
        echo "-- running in parallel --"
	echo "output of which command: $(which _SOLVERCONTROLS-SOLVER)"
        echo "mpirun -np $slots _SOLVERCONTROLS-SOLVER -parallel > run.log #> /dev/null 2>&1 #> run.log"
    mpirun -np $slots _SOLVERCONTROLS-SOLVER -parallel 2>&1 > run.log  #> /dev/null 2>&1 #> run.log
    else
        echo "-- running on single core --"
        _SOLVERCONTROLS-SOLVER > run.log #/dev/null 2>&1 #> run.log
    fi
    python copy_solver_here.py
b=$(date)
echo "automatic case running took from $a to $b"
fi

 massFile=postProcessing/volumeIntegrate_volumeIntegral/0/rhoBubble
 if [ -e $massFile ];then 
    cp $massFile ${massFile}ForParaView
    sed -i "s/#//g" ${massFile}ForParaView
 fi

# ----------------------------------------------------------------- end-of-file
