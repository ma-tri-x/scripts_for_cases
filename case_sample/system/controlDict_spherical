/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs (
      "libfoam.so"
      "libsimpleSwakFunctionObjects.so"
      "libswakFunctionObjects.so"
      //"libgroovyBC.so"
//       "libVOFInterpolationSchemes.so"
     );

application     localMassCorr_working_7894e6f;

startFrom       startTime;

startTime       0.0;

stopAt          endTime;

endTime         0.000101;

deltaT          1e-11;

writeControl    timeStep;
//writeControl    timeStep; adjustableRunTime

// the uncommented line of the below three MUST stand on top!!!!!
writeInterval   50;// every 10th timestep //
// writeInterval   1e-06; 
// for adjustableRunTime: every bla [s] 

purgeWrite      0;

writeFormat     ascii;

writePrecision  14;

writeCompression compressed;

timeFormat      general;

timePrecision   10;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.2;
discardMaxCoBubble false;
maxAlphaCo      0.2;
maxAcousticCo   1.0;
machNoSwitchToAcousticCo   0.6;
critAcousticCo  0.3;
stayBelowAcousticCo  8.0;

maxDeltaT       5e-08;
maxU        10000;

printInfos    false;


functions
{
//     probes
//     {
//         type            probes;
//         functionObjectLibs ("libsampling.so");
//         outputControl   timeStep;
//         outputInterval  1;
//         probeLocations
//         (
//             ( 0.0000001 0 0 )
//             ( 0.003 0 0 )
//         );
//         fields
//         (
//             p_rgh
//             U
//         );
//     }

//    volumeMinMax
//    {
//       type volumeMinMax;
//      functionObjectLibs
//        (
//          "libsimpleFunctionObjects.so"
//        );
//      verbose true;
//      outputControlMode   timeStep;
//      outputInterval  1;
//      fields
//        (
//          Mach
//        );
//    }

//    extremeP {
//     type  swakExpression;
//     valueType  set;
//     verbose  true;
//     outputControlMode timeStep;
//     outputInterval  1;
//     setName  lineY1;
//     set {
//       type  midPoint;
//       axis y ;
//       start (2e-06 -0.000792 0) ;   // -distReplace: y-Koordinate der Wand
//       end ( 2e-06   0.000495   0) ;  //
//     }
//     interpolate  false;
//     interpolationType  cell;
//     expression  "p_rgh";
//     accumulations (min max);
//     }
//
//     maxPPosition {
//       $extremeP;
//       expression "maxPosition(p_rgh)";
//       accumulations (average);
//     }
//
//     minPPosition {
//       $extremeP;
//       expression "minPosition(p_rgh)";
//       accumulations (average);
//     }
//
//   extremeUy {
//     type  swakExpression;
//     valueType  set;
//     verbose  true;
//     outputControlMode timeStep;
//     outputInterval  1;
//     setName  lineY1;
//     set {
//       type  midPoint;
//       axis y ;
//       start (1e-7 -0.000792 0) ;   // -distReplace: y-Koordinate der Wand
//       end   (1e-7  0.000495   0) ;  //
//     }
//     variables (
//                 "ydirection=vector(0,1,0);"
//                 "Uy=alpha1*(U & ydirection);"
//        );
//       expression "Uy";
//       accumulations (min max);
//     }
// 
//     maxUyPosition {
//       $extremeUy;
//       expression "maxPosition(Uy)";
//       accumulations (average);
//     }
//     minUyPosition {
//       $extremeUy;
//       expression "minPosition(Uy)";
//       accumulations (average);
//     }
    
   volumeIntegral
   {
      type volumeIntegrate;
     functionObjectLibs
       (
         "libsimpleFunctionObjects.so"
       );
     verbose true;
     outputControlMode   timeStep;
     outputInterval  1;
     fields
       (
            //rho
            rhoBubble
            alpha2
            //p_rgh
       );
   }

}


// ************************************************************************* //
